<?php

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCatalogTable extends Migration
{
    /**
     * @var string
     */
    protected $categoriesTable;

    /**
     * @var string
     */
    protected $manufacturersTable;

    /**
     * @var string
     */
    protected $attrGroupsTable;

    /**
     * @var string
     */
    protected $attrsTable;

    /**
     * @var string
     */
    protected $specGroupsTable;

    /**
     * @var string
     */
    protected $specsTable;

    /**
     * @var string
     */
    protected $productsTable;

    /**
     * @var string
     */
    protected $itemsTable;

    /**
     * @var string
     */
    protected $productAttrTable;

    /**
     * @var string
     */
    protected $productSpecTable;

    /**
     * @var string
     */
    protected $productSpecGroupTable;

    /**
     * @var string
     */
    protected $itemSpecTable;

    /**
     * @var string
     */
    protected $productPictureTable;

    /**
     * @var string
     */
    protected $manufacturerProductsTable;

    /**
     * CreateCatalogTable constructor.
     */
    public function __construct()
    {
        $this->categoriesTable = Config::get('catalog.categories_table');
        $this->manufacturersTable = Config::get('catalog.manufacturers_table');
        $this->attrGroupsTable = Config::get('catalog.attr_groups_table');
        $this->attrsTable = Config::get('catalog.attrs_table');
        $this->specsTable = Config::get('catalog.specs_table');
        $this->specGroupsTable = Config::get('catalog.spec_groups_table');
        $this->productsTable = Config::get('catalog.products_table');
        $this->itemsTable = Config::get('catalog.items_table');
        $this->productSpecGroupTable = Config::get('catalog.product_spec_group_table');
        $this->productSpecTable = Config::get('catalog.product_spec_table');
        $this->itemSpecTable = Config::get('catalog.item_spec_table');
        $this->productAttrTable = Config::get('catalog.product_attr_table');
        $this->productPictureTable = Config::get('catalog.product_picture_table');
        $this->manufacturerProductsTable = Config::get('catalog.manufacturer_products_table');
    }

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        // Create table for storing categories
        Schema::create($this->categoriesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('parent_id')->default(0);
            $table->string('name', 32);
            $table->string('path')->default('');
            $table->text('description')->nullable();
            $table->unsignedInteger('picture_id')->nullable();
            $table->integer('sort')->default(0);
            $table->boolean('is_active')->default(true);
            $table->string('url_rewrite')->nullable();
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->timestamps();
        });

        // Create table for storing attribute names
        Schema::create($this->attrGroupsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('category_id');
            $table->string('name', 32);
            $table->string('description')->nullable();
            $table->unsignedTinyInteger('type')->default(0);
            $table->boolean('is_filterable')->default(false);
            $table->boolean('is_searchable')->default(false);
            $table->boolean('is_viewable')->default(false);
            $table->integer('sort')->default(0);
            $table->timestamps();
        });

        // Create table for storing attribute values
        Schema::create($this->attrsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('group_id');
            $table->string('name', 32);
            $table->string('description')->nullable();
            $table->integer('sort')->default(0);
            $table->timestamps();
        });

        // Create table for storing specification names
        Schema::create($this->specGroupsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 32);
            $table->string('description')->nullable();
            $table->integer('sort')->default(0);
            $table->timestamps();
        });

        // Create table for storing specification values
        Schema::create($this->specsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('group_id');
            $table->string('name', 32);
            $table->string('description')->nullable();
            $table->integer('sort')->default(0);
            $table->timestamps();
        });

        // Create table for storing manufacturers
        Schema::create($this->manufacturersTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 32);
            $table->string('description');
            $table->string('homepage');
            $table->string('im');
            $table->string('phone')->nullable();
            $table->integer('sort')->default(0);
            $table->unsignedTinyInteger('purchasing_discount')->default(0);
            $table->unsignedInteger('product_count')->default(0);
            $table->string('product_type')->default('');
            $table->string('product_update_period')->default('');
            $table->timestamp('product_update_time')->nullable();
            $table->boolean('is_active')->default(true);
            $table->string('admin');
            $table->timestamps();
        });

        // Create table for storing products
        Schema::create($this->productsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('category_id');
            $table->string('name');
            $table->string('spu', 32)->unique();
            $table->string('description', 500);
            $table->longText('content')->nullable();
            $table->boolean('is_active')->default(true);
            $table->integer('sort')->default(0);
            $table->string('url_rewrite')->nullable();
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->string('created_by', 32)->nullable();
            $table->string('updated_by', 32)->nullable();
            $table->timestamps();
        });

        // Create table for storing items
        Schema::create($this->itemsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->string('sku', 32)->default('')->index();
            $table->decimal('amount', 16, 4);
            $table->unsignedTinyInteger('discount')->default(0);
            $table->decimal('weight', 16, 4)->default(0);
            $table->unsignedInteger('quantity')->default(0);
            $table->unsignedInteger('picture_id');
            $table->boolean('is_active')->default(true);
            $table->boolean('is_master')->default(false);
        });

        // Create table for storing product attribute
        Schema::create($this->productAttrTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('attr_id');
            $table->string('customer_value')->nullable();
        });

        // Create table for storing product specification group attribute
        Schema::create($this->productSpecGroupTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('spec_group_id');
            $table->unsignedTinyInteger('control_type')->default(0);
            $table->string('text_prompt')->nullable();
            $table->boolean('is_required')->default(false);
            $table->integer('sort')->default(0);
        });

        // Create table for storing product attribute
        Schema::create($this->productSpecTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('spec_id');
            $table->string('customer_value')->nullable();
            $table->boolean('is_selected')->default(false);
            $table->unsignedInteger('picture_id')->nullable();
            $table->unsignedInteger('swatch_picture_id')->nullable();
            $table->integer('sort')->default(0);
        });

        // Create table for storing product specification
        Schema::create($this->itemSpecTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('item_id');
            $table->unsignedInteger('spec_id');
        });

        // Create table for storing product picture
        Schema::create($this->productPictureTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('picture_id');
            $table->integer('sort')->default(0);
        });

        // Create table for storing product manufacturer
        Schema::create($this->manufacturerProductsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('manufacturer_id');
            $table->string('sku', 32)->nullable();
            $table->string('name')->nullable();
            $table->string('url')->nullable();
            $table->decimal('price', 16, 2);
            $table->unsignedTinyInteger('discount')->default(0);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists($this->categoriesTable);
        Schema::dropIfExists($this->attrsTable);
        Schema::dropIfExists($this->attrGroupsTable);
        Schema::dropIfExists($this->specGroupsTable);
        Schema::dropIfExists($this->specsTable);
        Schema::dropIfExists($this->manufacturersTable);
        Schema::dropIfExists($this->productsTable);
        Schema::dropIfExists($this->itemsTable);
        Schema::dropIfExists($this->productSpecTable);
        Schema::dropIfExists($this->productSpecGroupTable);
        Schema::dropIfExists($this->productAttrTable);
        Schema::dropIfExists($this->itemSpecTable);
        Schema::dropIfExists($this->productPictureTable);
        Schema::dropIfExists($this->manufacturerProductsTable);
    }
}