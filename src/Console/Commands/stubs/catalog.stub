<?php

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCatalogTable extends Migration
{
    /**
     * @var string
     */
    protected $attrsTable;

    /**
     * @var string
     */
    protected $attrValuesTable;

    /**
     * @var string
     */
    protected $categoriesTable;

    /**
     * @var string
     */
    protected $specsTable;

    /**
     * @var string
     */
    protected $specValuesTable;

    /**
     * @var string
     */
    protected $manufacturersTable;

    /**
     * @var string
     */
    protected $productsTable;

    /**
     * @var string
     */
    protected $itemsTable;

    /**
     * @var string
     */
    protected $productSpecTable;

    /**
     * @var string
     */
    protected $productSpecValueTable;

    /**
     * @var string
     */
    protected $manufacturerProductsTable;

    /**
     * CreateCatalogTable constructor.
     */
    public function __construct()
    {
        $this->attrsTable = self::getConfigModelTable('attr');
        $this->attrValuesTable = self::getConfigModelTable('attr_value');
        $this->categoriesTable = self::getConfigModelTable('category');
        $this->specsTable = self::getConfigModelTable('spec');
        $this->specValuesTable = self::getConfigModelTable('spec_value');
        $this->productsTable = self::getConfigModelTable('product');
        $this->productSpecTable = self::getConfigModelTable('product_spec');
        $this->productSpecValueTable = self::getConfigModelTable('product_spec_value');
        $this->itemsTable = self::getConfigModelTable('item');
        $this->manufacturersTable = self::getConfigModelTable('manufacturer');
        $this->manufacturerProductsTable = self::getConfigModelTable('manufacturer_product');
    }

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        // Create table for storing attribute names
        Schema::create($this->attrsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 128);
            $table->string('slug', 128)->unique();
            $table->string('description')->nullable();
            $table->unsignedTinyInteger('type')->default(0);
            $table->boolean('is_filterable')->default(false);
            $table->boolean('is_searchable')->default(false);
            $table->boolean('is_viewable')->default(false);
            $table->integer('position')->default(0);
            $table->timestamps();
        });

        // Create table for storing attribute values
        Schema::create($this->attrValuesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('attr_id');
            $table->string('name', 128);
            $table->string('slug', 128)->unique();
            $table->string('description')->nullable();
            $table->integer('position')->default(0);
            $table->timestamps();
        });

        // Create table for storing categories
        Schema::create($this->categoriesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('parent_id')->default(0);
            $table->string('name', 128);
            $table->string('path')->default('');
            $table->text('description')->nullable();
            $table->string('slug')->nullable();
            $table->text('banner')->nullable();
            $table->integer('position')->default(0);
            $table->boolean('is_active')->default(true);
            $table->text('attr_ids')->nullable();
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->timestamps();
        });

        // Create table for storing specification names
        Schema::create($this->specsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 128);
            $table->string('slug', 128)->unique();
            $table->string('description')->nullable();
            $table->integer('position')->default(0);
            $table->timestamps();
        });

        // Create table for storing specification values
        Schema::create($this->specValuesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('spec_id');
            $table->string('name', 128);
            $table->string('slug', 128)->unique();
            $table->string('description')->nullable();
            $table->integer('position')->default(0);
            $table->timestamps();
        });

        // Create table for storing manufacturers
        Schema::create($this->manufacturersTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 128);
            $table->string('description');
            $table->string('homepage');
            $table->string('im');
            $table->string('phone')->nullable();
            $table->integer('position')->default(0);
            $table->unsignedTinyInteger('purchasing_discount')->default(0);
            $table->unsignedInteger('product_count')->default(0);
            $table->string('product_type')->default('');
            $table->string('product_update_period')->default('');
            $table->timestamp('product_update_time')->nullable();
            $table->boolean('is_active')->default(true);
            $table->string('admin');
            $table->timestamps();
        });

        // Create table for storing products
        Schema::create($this->productsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('category_id');
            $table->string('name');
            $table->string('spu', 32)->unique();
            $table->string('description', 500);
            $table->string('slug')->nullable();
            $table->longText('detail')->nullable();
            $table->text('image_ids')->nullable();
            $table->text('attr_ids')->nullable();
            $table->text('size_chart')->nullable();
            $table->timestamp('published_at')->nullable();
            $table->boolean('is_active')->default(true);
            $table->integer('position')->default(0);
            $table->unsignedInteger('total_sold')->default(0);
            $table->unsignedInteger('month_sold')->default(0);
            $table->unsignedInteger('season_sold')->default(0);
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->string('created_by', 32)->nullable();
            $table->string('updated_by', 32)->nullable();
            $table->timestamps();
        });

        // Create table for storing items
        Schema::create($this->itemsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->string('product_specs');
            $table->string('product_spec_names');
            $table->string('sku', 32)->default('');
            $table->decimal('price', 16, 2);
            $table->unsignedTinyInteger('discount')->default(0);
            $table->unsignedInteger('weight')->default(0);
            $table->unsignedInteger('inventory_quantity')->default(0);
            $table->unsignedInteger('image_id');
            $table->boolean('is_primary')->default(false);

            $table->index(['sku']);
            $table->unique(['product_id', 'product_specs']);
        });

        // Create table for storing product specification attribute
        Schema::create($this->productSpecTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('spec_id');
            $table->unsignedTinyInteger('control_type')->default(0);
            $table->string('name')->nullable();
            $table->boolean('is_required')->default(false);
            $table->integer('position')->default(0);
        });

        // Create table for storing product specification value attribute
        Schema::create($this->productSpecValueTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_spec_id');
            $table->unsignedInteger('spec_value_id');
            $table->string('name')->nullable();
            $table->boolean('is_selected')->default(false);
            $table->unsignedInteger('image_id')->nullable();
            $table->unsignedInteger('swatch_image_id')->nullable();
            $table->integer('position')->default(0);
        });

        // Create table for storing product manufacturer
        Schema::create($this->manufacturerProductsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('product_id');
            $table->unsignedInteger('manufacturer_id');
            $table->string('sku', 32)->nullable();
            $table->string('name')->nullable();
            $table->string('url')->nullable();
            $table->decimal('price', 16, 2);
            $table->unsignedTinyInteger('discount')->default(0);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists($this->attrsTable);
        Schema::dropIfExists($this->attrValuesTable);
        Schema::dropIfExists($this->categoriesTable);
        Schema::dropIfExists($this->specsTable);
        Schema::dropIfExists($this->specValuesTable);
        Schema::dropIfExists($this->manufacturersTable);
        Schema::dropIfExists($this->productsTable);
        Schema::dropIfExists($this->itemsTable);
        Schema::dropIfExists($this->productSpecValueTable);
        Schema::dropIfExists($this->productSpecTable);
        Schema::dropIfExists($this->manufacturerProductsTable);
    }

    private static function getConfigModelTable($key) {
        $class = Config::get('catalog.' . $key);
        $model = new $class;
        return $model->getTable();
    }
}